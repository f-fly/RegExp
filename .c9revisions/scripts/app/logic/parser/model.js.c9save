{"ts":1376044611437,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"define([\"backbone\", \"underscore\"], function(Backbone, _) {\n  var Parser = Backbone.Model.extend({\n    defaults: {\n      src: \"this.write(this.item(0));\",\n      reg: \"\",\n      name: \"[unknown]\"\n    }\n  });\n  Parser.prototype.applyData = function(data) {\n    var self = this\n      , reg = self.get(\"reg\")\n      , result = []\n      , globalData = {}\n      , stream = []\n      , func = function(){};\n    try{\n      func = new Function([], self.get(\"src\"))\n    }catch(e){\n      \n      self.trigger(\"invalid\", e);\n      return stream;\n    }\n      \n    if(!reg.length) {\n      data.forEach(function(item) {\n        item.trigger(\"match\", []);\n      });\n    }else{\n      try {\n        var reg_global = new RegExp(reg, \"gi\")\n          , reg_line   = new RegExp(reg, \"i\");\n          \n        data.forEach(function(item) {\n          var lines = item.get(\"text\").match(reg_global) || [];\n          lines.forEach(function(line) {\n            result.push(line.match(reg_line));\n          });\n          item.trigger(\"match\", lines);\n        });\n      }catch(e){\n        self.trigger(\"invalid\", e);\n        return stream;\n      }\n    }\n    try {\n    \n      result.forEach(function(item, n) {\n        func.call({\n          key: function() {\n            return n;\n          },\n          item: function(k) {\n            return item[k] || false;\n          },\n          data: function(index, value) {\n            if(value !== undefined) {\n              globalData[index] = value;\n              return this;\n            }\n            return globalData[index];\n          },\n          length: function() {\n            return result.length;\n          },\n          row: function(index) {\n            return function(key) {\n              if (result[index] && result[index][key]) return result[index][key];\n              return false;\n            }\n          },\n          write: function(text) {\n            var escaped = _.escape(text);\n            stream.push(escaped);\n            self.trigger(\"write\", escaped);\n          }\n        });\n      });\n    }catch(e){\n      self.trigger(\"invalid\", e);\n      return stream;\n    }\n    return stream;\n\n  }\n  return Parser;\n})"]],"start1":0,"start2":0,"length1":0,"length2":2140}]],"length":2140}
